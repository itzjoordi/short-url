---
import Layout from "../layouts/Layout.astro";

const endpoint = import.meta.env.PUBLIC_API_URL;
---

<Layout title="PetitesURL">
  <main class="flex flex-col justify-center items-center">
    <form class="inline-flex max-w-5xl rounded-lg shadow-sm">
      <input
        type="text"
        id="url"
        placeholder="https://..."
        maxlength="256"
        class="py-3 px-4 inline-flex shadow-sm rounded-s-lg text-sm w-96
			focus-visible:outline-none
			disabled:opacity-50
			disabled:pointer-events-none
			dark:bg-slate-500
			dark:border-gray-200
			dark:text-white
			dark:focus:ring-gray-600"
      />
      <button
        type="button"
        id="submit"
        class="py-3 px-4 inline-flex justify-center items-center gap-x-2 text-sm font-semibold
			rounded-e-lg
			focus:border-none
			focus:outline-none
			border-blue-600
			bg-blue-600
			text-white
			hover:bg-blue-700
			disabled:opacity-50
			disabled:pointer-events-none
			overflow-hidden
			shadow-lg
			before:ease relative
			transition-all before:absolute before:right-0 before:top-0 before:h-12 before:w-6 before:translate-x-12
			before:rotate-6 before:bg-white before:opacity-10 before:duration-700 hover:shadow-gray-700 hover:before:-translate-x-40"
      >
        <span class="relative z-10">Som-hi!</span>
      </button>
    </form>
    <div id="result" class="hidden items-center gap-x-3 mt-4">
      <div class="text-sm font-medium text-gray-800 dark:text-white">
        La URL generada Ã©s:
        <span id="shorturl"> </span>
      </div>

      <button
        type="button"
        id="copy"
        class="js-clipboard p-3 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-gray-200 bg-white text-gray-800 shadow-sm hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none dark:bg-slate-900 dark:border-gray-700 dark:text-white dark:hover:bg-gray-800 dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-gray-600"
      >
        <svg
          class="js-clipboard-default w-4 h-4 group-hover:rotate-6 transition"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          ><rect width="8" height="4" x="8" y="2" rx="1" ry="1"></rect><path
            d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"
          ></path></svg
        >

        <svg
          class="js-clipboard-success hidden w-4 h-4 text-white"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          ><polyline points="20 6 9 17 4 12"></polyline></svg
        >
      </button>
    </div>
  </main>

  <script define:vars={{ endpoint }}>
    const button = document.getElementById("submit");
    const span = document.getElementById("shorturl");
    const result = document.getElementById("result");

    const copy = document.getElementById("copy");
    const clipboardDefault = document.getElementsByClassName(
      "js-clipboard-default"
    );
    const clipboardSuccess = document.getElementsByClassName(
      "js-clipboard-success"
    );

    button?.addEventListener("click", async () => {
      button.disabled = true;
      result.classList.add("hidden");
      result.classList.remove("inline-flex");
      try {
        const urlElement = document.getElementById("url");
        const url = urlElement ? urlElement.value : "";

        if (url.length < 1) {
          console.error("URL is empty");
          button.disabled = false;
          return;
        }

        const res = await fetch(`${endpoint}short`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            longurl: url,
          }),
        });
        const response = await res.json();
        span.innerText = response.shorturl;

        result.classList.toggle("hidden");
        result.classList.toggle("inline-flex");
        button.disabled = false;
      } catch (error) {
        if (error instanceof Error) {
          console.error(error.message);
        }
        button.disabled = false;
      }
    });

    copy?.addEventListener("click", async () => {
      clipboardDefault[0].classList.add("hidden");
      clipboardSuccess[0].classList.remove("hidden");

      const copyText = document.getElementById("shorturl");

      navigator.clipboard.writeText(copyText.innerText);

      setTimeout(() => {
        clipboardDefault[0].classList.remove("hidden");
        clipboardSuccess[0].classList.add("hidden");
      }, 2000);
    });
  </script>
</Layout>
